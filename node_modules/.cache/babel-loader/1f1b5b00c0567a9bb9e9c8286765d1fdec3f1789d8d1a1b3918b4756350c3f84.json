{"ast":null,"code":"import axios from 'axios';\nimport config from '../config';\nconst api = axios.create({\n  baseURL: config.apiBaseUrl,\n  timeout: 10000\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  console.log('API Request:', config.method.toUpperCase(), config.url);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  console.log('API Response:', response.status, response.data);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nexport const getDevices = async () => {\n  try {\n    const response = await api.get('/devices');\n\n    // 根据您的API响应格式，需要先解析body字符串\n    if (response.data.body && typeof response.data.body === 'string') {\n      const bodyData = JSON.parse(response.data.body);\n      return bodyData.devices;\n    }\n\n    // 如果直接返回devices数组\n    return response.data.devices || [];\n  } catch (error) {\n    console.error('Error fetching devices:', error);\n    throw error;\n  }\n};\nexport const getDeviceDetails = async deviceId => {\n  try {\n    const response = await api.get(`/devices/${deviceId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching device details:', error);\n    throw error;\n  }\n};\nexport const getDeviceHistory = async (deviceId, type = 'BRIGHTNESS', from, to) => {\n  try {\n    const params = {\n      type\n    };\n    if (from) params.from = from;\n    if (to) params.to = to;\n    const response = await api.get(`/devices/${deviceId}/history`, {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching device history:', error);\n    throw error;\n  }\n};\nexport const sendCommand = async (deviceId, commandType, parameters) => {\n  try {\n    const response = await api.post(`/devices/${deviceId}/command`, {\n      commandType,\n      parameters\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending command:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","config","api","create","baseURL","apiBaseUrl","timeout","interceptors","request","use","console","log","method","toUpperCase","url","error","Promise","reject","response","status","data","_error$response","message","getDevices","get","body","bodyData","JSON","parse","devices","getDeviceDetails","deviceId","getDeviceHistory","type","from","to","params","sendCommand","commandType","parameters","post"],"sources":["/Users/wutao/Documents/AMS_Web/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport config from '../config';\n\nconst api = axios.create({\n  baseURL: config.apiBaseUrl,\n  timeout: 10000,\n});\n\n// 请求拦截器\napi.interceptors.request.use(\n  (config) => {\n    console.log('API Request:', config.method.toUpperCase(), config.url);\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器\napi.interceptors.response.use(\n  (response) => {\n    console.log('API Response:', response.status, response.data);\n    return response;\n  },\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\nexport const getDevices = async () => {\n  try {\n    const response = await api.get('/devices');\n    \n    // 根据您的API响应格式，需要先解析body字符串\n    if (response.data.body && typeof response.data.body === 'string') {\n      const bodyData = JSON.parse(response.data.body);\n      return bodyData.devices;\n    }\n    \n    // 如果直接返回devices数组\n    return response.data.devices || [];\n  } catch (error) {\n    console.error('Error fetching devices:', error);\n    throw error;\n  }\n};\n\nexport const getDeviceDetails = async (deviceId) => {\n  try {\n    const response = await api.get(`/devices/${deviceId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching device details:', error);\n    throw error;\n  }\n};\n\nexport const getDeviceHistory = async (deviceId, type = 'BRIGHTNESS', from, to) => {\n  try {\n    const params = { type };\n    if (from) params.from = from;\n    if (to) params.to = to;\n    \n    const response = await api.get(`/devices/${deviceId}/history`, { params });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching device history:', error);\n    throw error;\n  }\n};\n\nexport const sendCommand = async (deviceId, commandType, parameters) => {\n  try {\n    const response = await api.post(`/devices/${deviceId}/command`, {\n      commandType,\n      parameters,\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending command:', error);\n    throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}